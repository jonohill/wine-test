name: Wine ARM64 Linux Build

on:
  push:
    branches: [ main ]
    paths: 
      - 'Dockerfile.debian'
      - '.github/workflows/wine-build-linux.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile.debian' 
      - '.github/workflows/wine-build-linux.yml'
  workflow_dispatch:

jobs:
  build-wine-linux-arm64:
    runs-on: ubuntu-24.04-arm  # Use native ARM64 runner
    
    name: Wine ARM64 Linux (Debian)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build Wine ARM64 Linux (Debian)
      run: |
        echo "Building Wine for ARM64 Linux with Debian glibc..."
        echo "Running on native ARM64 runner: $(uname -m)"
        
        docker build \
          -f Dockerfile.debian \
          -t wine-debian-arm64 \
          .
          
    - name: Extract Wine build from container
      run: |
        echo "Extracting Wine installation from container..."
        mkdir -p output
        
        # Create a temporary container to copy files
        docker create --name wine-temp wine-debian-arm64
        docker cp wine-temp:/opt/wine-arm64 output/
        docker rm wine-temp
        
        # Create tarball
        cd output
        tar -czf wine-arm64-linux-debian.tar.gz wine-arm64/
        rm -rf wine-arm64/
        
    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la output/
        if [ -f "output/wine-arm64-linux-debian.tar.gz" ]; then
          echo "✅ Wine ARM64 Linux build successful!"
          echo "Archive size: $(du -h output/wine-arm64-linux-debian.tar.gz)"
        else
          echo "❌ Build failed - no output archive found"
          exit 1
        fi
        
    - name: Extract and test Wine build
      run: |
        cd output
        tar -tzf wine-arm64-linux-debian.tar.gz | head -20
        echo "Archive contains $(tar -tzf wine-arm64-linux-debian.tar.gz | wc -l) files"
        
    - name: Test Wine in container
      run: |
        echo "Testing Wine functionality..."
        docker run --rm wine-debian-arm64 wine --version
        docker run --rm wine-debian-arm64 wine --help | head -3
        
    - name: Upload Wine ARM64 Linux build
      uses: actions/upload-artifact@v4
      with:
        name: wine-arm64-linux-debian-${{ github.run_number }}
        path: output/wine-arm64-linux-debian.tar.gz
        retention-days: 30
        
    - name: Create build summary
      run: |
        echo "## 🍷 Wine ARM64 Linux Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Platform**: Linux ARM64 (aarch64)" >> $GITHUB_STEP_SUMMARY  
        echo "**C Library**: glibc (Debian 12)" >> $GITHUB_STEP_SUMMARY
        echo "**Wine Version**: $(docker run --rm wine-debian-arm64 wine --version)" >> $GITHUB_STEP_SUMMARY
        echo "**PE Cross-compilation**: Enabled (LLD)" >> $GITHUB_STEP_SUMMARY
        echo "**Runner**: Native ARM64 (ubuntu-24.04-arm)" >> $GITHUB_STEP_SUMMARY
        echo "**Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "output/wine-arm64-linux-debian.tar.gz" ]; then
          echo "✅ **Status**: Build successful" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Archive Size**: $(du -h output/wine-arm64-linux-debian.tar.gz | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Files**: $(tar -tzf output/wine-arm64-linux-debian.tar.gz | wc -l) files" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Build failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- ARM64 architecture (aarch64) - **Native build**" >> $GITHUB_STEP_SUMMARY
        echo "- glibc (Debian 12)" >> $GITHUB_STEP_SUMMARY
        echo "- Standard dynamic linking" >> $GITHUB_STEP_SUMMARY
        echo "- LLD linker for PE cross-compilation" >> $GITHUB_STEP_SUMMARY
        echo "- Full dependency set" >> $GITHUB_STEP_SUMMARY
        echo "- Windows PE support enabled" >> $GITHUB_STEP_SUMMARY
